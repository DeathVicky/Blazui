@inherits MenuContainer
@implements IMenuItem
<li role="menuitem" tabindex="0" aria-haspopup="true"
    class="el-submenu @(active?"is-active":"") @(opened?"is-opened":"")"
    aria-expanded="@(opened?"true":"")">
    <div @onmouseover="OnOver"
         @onmouseout="OnOut" 
         @onclick="OnClick" 
         class="el-submenu__title" 
         style="background-color:@backgroundColor;color:@textColor; border-bottom-color:@borderColor;">
        @Label
        <i class="el-submenu__icon-arrow el-icon-arrow-down"></i>
    </div>
    @if (IsVertical)
    {
        <ul role="menu" class="el-menu el-menu--inline" style="@(opened?"":"display:none;")" data-old-padding-top="" data-old-padding-bottom="" data-old-overflow="">
            <CascadingValue Value="this">
                @ChildContent
            </CascadingValue>
        </ul>
    }
</li>

@functions {

    [Parameter]
    public string Index { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public bool Disabled { get; set; } = false;

    [Parameter]
    public string Label { get; set; }

    [CascadingParameter]
    public MenuContainer Container { get; set; }

    [CascadingParameter]
    public MenuOptions Options { get; set; }

    private string textColor;
    private string backgroundColor;
    private string borderColor;

    private bool active = false;
    private bool opened = false;

    private bool IsVertical { get {
            return Options != null && Options.Mode == "vertical";
        } }

    public void Active()
    {
        active = true;
    }
    public void DeActive()
    {
        active = false;
        borderColor = "transparent";

        if (_activedItem != null)
        {
            _activedItem.DeActive();
            _activedItem = null;
        }
        OnOut();
        StateHasChanged();
    }

    public override void ActiveItem(IMenuItem item)
    {
        if (item == null)
        {
            return;
        }

        base.ActiveItem(item);
        Container.ActiveItem(this);
    }

    protected override void OnInitialized()
    {
        backgroundColor = Options.BackgroundColor;
        textColor = Options.TextColor;

        base.OnInitialized();
    }

    private void OnOver()
    {
        //todo: 颜色值经过计算而得
        backgroundColor = Options.HoverColor;
        textColor = Options.ActiveTextColor;
        //opened = true;
    }

    private void OnOut()
    {
        if (!active || opened) {
            backgroundColor = Options.BackgroundColor;
            textColor = Options.TextColor;
            return;
        }
        /*
        if (IsVertical && !opened) {
            backgroundColor = Options.HoverColor;
            textColor = Options.ActiveTextColor;
        }
        //opened = false;
        backgroundColor = (!IsVertical || !opened)?Options.HoverColor:Options.BackgroundColor;
        */
    }

    private void OnClick()
    {
        if (IsVertical)
        {
            opened = !opened;
        }
    }
}
